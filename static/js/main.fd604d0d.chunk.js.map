{"version":3,"sources":["Components/ReplyForm/ReplyForm.jsx","Components/RepliedComment/RepliedComment.jsx","App.js","serviceWorker.js","index.js"],"names":["ReplyForm","props","type","className","onClick","event","submitReplyComment","index","RepliedComment","repliedCommentObj","commentDescription","likeRepliedComment","originalCommentIndex","repliedCommentIndex","likes","dislikeRepliedComment","dislikes","deleteRepliedComment","App","state","comments","getUserComment","setState","target","value","submitComment","console","log","commentsCopy","commentsObj","replies","showReplyForm","push","deleteComment","splice","likesComment","commets","dislikesComment","previousSibling","indexToOriginalComment","indexToRepliedComment","allComments","this","map","commentObj","key","onChange","length","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd604d0d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction ReplyForm(props) {\n  return (\n    <form>\n      <textarea\n        type=\"text\"\n        className=\"comment-box\"\n      />\n      <button type=\"button\" onClick={(event) => props.submitReplyComment(event, props.index)}>  \n        Submit\n      </button>\n    </form>\n  );\n}\n\nexport default ReplyForm;\n","import React from 'react'\n\n\n\nconst RepliedComment = (props) => {\n    return(\n        <div className='replied-comment'>\n            <p>{props.repliedCommentObj.commentDescription}</p>\n            <button onClick={() => props.likeRepliedComment(props.originalCommentIndex, props.repliedCommentIndex)}>Like</button>\n            <p>{props.repliedCommentObj.likes}</p>\n            <button onClick={() => props.dislikeRepliedComment(props.originalCommentIndex, props.repliedCommentIndex)}>Dislike</button>\n            <p>{props.repliedCommentObj.dislikes}</p>\n            <button onClick={() => props.deleteRepliedComment(props.originalCommentIndex, props.repliedCommentIndex)}>Delete</button>\n          </div>\n    )\n}\nexport default RepliedComment","import React from 'react';\nimport './App.css'\nimport ReplyForm from './Components/ReplyForm/ReplyForm'\nimport RepliedComment from './Components/RepliedComment/RepliedComment';\nclass App extends React.Component  {\n  \n  state = {\n    comments: [],\n    commentDescription: ''\n  }\n  \n  getUserComment = (event) => {\n    this.setState({\n      commentDescription: event.target.value\n    })\n  }  \n  \n  submitComment = () => {\n    console.log(this.state.commentDescription)\n    const commentsCopy = [...this.state.comments] //copy of comments array\n    const commentsObj = {\n      commentDescription: this.state.commentDescription,\n      likes: 0,\n      dislikes: 0,\n      replies:[],\n      showReplyForm:false\n    }\n    commentsCopy.push(commentsObj)\n    this.setState({\n      comments: commentsCopy\n    })\n  }\n\n   deleteComment = (index) => {\n    console.log(index)\n    const commentsCopy = [...this.state.comments]\n    commentsCopy.splice(index, 1)\n    this.setState({\n      comments:commentsCopy\n    })\n  }\n\n  likesComment = (index) => {\n    console.log(index)\n    const commentsCopy = [...this.state.comments]\n    commentsCopy[index].likes += 1\n    this.setState({commets: commentsCopy})\n  }\n\n  dislikesComment = (index) => {\n    console.log(index)\n    const commentsCopy = [...this.state.comments]\n    commentsCopy[index].dislikes +=1\n    this.setState({ comments:commentsCopy})\n  }\n\n  showReplyForm = (index) => {\n    const commentsCopy = [...this.state.comments]\n    commentsCopy[index].showReplyForm = !commentsCopy[index].showReplyForm\n    this.setState({comments:commentsCopy})\n  }\n\n  submitReplyComment = (event, index) => {\n    console.log(event.target.previousSibling.value)\n    const commentsCopy = [...this.state.comments]\n    const commentsObj = {\n      commentDescription: event.target.previousSibling.value,\n      likes: 0,\n      dislikes: 0,\n    }\n    commentsCopy[index].replies.push(commentsObj)\n    commentsCopy[index].showReplyForm = !commentsCopy[index].showReplyForm\n    this.setState({comments: commentsCopy})\n  }\n\n  likeRepliedComment = (indexToOriginalComment, indexToRepliedComment) => {\n    const commentsCopy = [...this.state.comments]\n    commentsCopy[indexToOriginalComment].replies[indexToRepliedComment].likes += 1\n    this.setState({commets: commentsCopy})\n  }\n\n  dislikeRepliedComment = (indexToOriginalComment, indexToRepliedComment) => {\n    const commentsCopy = [...this.state.comments]\n    commentsCopy[indexToOriginalComment].replies[indexToRepliedComment].dislikes += 1\n    this.setState({commets: commentsCopy})\n  }\n\n  deleteRepliedComment = (indexToOriginalComment, indexToRepliedComment) => {\n    const commentsCopy = [...this.state.comments]\n    commentsCopy[indexToOriginalComment].replies.splice(indexToRepliedComment, 1)\n    this.setState({\n      comments:commentsCopy\n    })\n  }\n\n\n\n  render(){\n    const {comments} = this.state\n    const allComments = comments.map((commentObj, originalCommentIndex) => {\n        return (\n          <>\n          <div key={commentObj.commentDescription+originalCommentIndex}>\n            {commentObj.commentDescription}\n            <button onClick={() => this.likesComment(originalCommentIndex)}>Like</button>\n            <p>{commentObj.likes}</p>\n            <button onClick={() => this.dislikesComment(originalCommentIndex)}>Dislike</button>\n            <p>{commentObj.dislikes}</p>\n            <button onClick={() => this.showReplyForm(originalCommentIndex)}>Reply</button>\n            <button onClick={() => this.deleteComment(originalCommentIndex)}>Delete</button>\n          </div>\n          {commentObj.replies.map((repliedCommentObj, repliedCommentIndex) => {\n            return(\n              <RepliedComment \n                originalCommentIndex={originalCommentIndex}\n                repliedCommentObj={repliedCommentObj} \n                repliedCommentIndex={repliedCommentIndex} \n                likeRepliedComment={this.likeRepliedComment}\n                dislikeRepliedComment={this.dislikeRepliedComment}\n                deleteRepliedComment={this.deleteRepliedComment}\n                />\n            )\n          })}\n          {commentObj.showReplyForm && (\n            <ReplyForm index={originalCommentIndex} submitReplyComment={this.submitReplyComment}/>\n          )}\n          </>\n        )\n    })\n\n\n     return (\n       <div>\n         <form>\n           <textarea onChange={this.getUserComment} \n            type=\"text\" className=\"comment-box\" />\n           <button onClick={this.submitComment} type=\"button\">Submit</button>\n         </form>\n         <div>{allComments.length > 0 ? allComments : 'No comments yet.'}</div> {/* ternary */}\n       </div>\n         \n     )\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}